<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CdiajadeX&#39;s world</title>
  <subtitle>way to my glory</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenyuxiaodhr.github.io/"/>
  <updated>2017-03-28T08:45:00.000Z</updated>
  <id>http://chenyuxiaodhr.github.io/</id>
  
  <author>
    <name>CdiajadeX</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MIT挑战（如何在12个月内自学完成MIT计算机科学的33门课程|内附MIT公开课程资源和学习顺序）</title>
    <link href="http://chenyuxiaodhr.github.io/zh-CN/CS-Learning/MIT-Challenge/"/>
    <id>http://chenyuxiaodhr.github.io/zh-CN/CS-Learning/MIT-Challenge/</id>
    <published>2017-03-28T08:16:07.000Z</published>
    <updated>2017-03-28T08:45:00.000Z</updated>
    
    <content type="html">&lt;p&gt;译者注：本文译自&lt;a href=&quot;https://www.scotthyoung.com/blog/myprojects/mit-challenge-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scott H. Young的博客&lt;/a&gt;，Scott拥有超强的学习能力，曾在12个月内自学完成麻省理工学院计算机科学的33门课程。本文就是他个人对于这次MIT挑战的介绍和总结。&lt;/p&gt;
&lt;p&gt;版权声明：本次翻译已经得到Scott本人授权，禁止任何形式的转载。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在接下来的12个月里，我将在&lt;strong&gt;不去上课&lt;/strong&gt;的情况下，学完整个MIT四年分的计算机课程。&lt;/p&gt;
&lt;p&gt;更新：MIT挑战现在已经结束了。我在2012年9月26日完成了挑战，距离开始时间2011年10月1日刚好12个月。下面将列出我所有课程的考试、官方解法以及我写的代码的链接。&lt;/p&gt;
&lt;p&gt;回答一些普遍的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我花了多少功夫来完成这次挑战？一开始差不多每周60个小时，到后来就是35小时左右。&lt;/li&gt;
&lt;li&gt;你拿到MIT的学位了吗？没有。看上面的视频就知道我完成这次无学分学习的动机。&lt;/li&gt;
&lt;li&gt;你是否做了所有MIT学生做的事情？没有。我考试和编程项目的总课程很类似MIT列出的课程，有些实验课和人文学科我不得不改成了其他科目，但是总学时是一样的。这是&lt;a href=&quot;http://catalog.mit.edu/degree-charts/computer-science-engineering-course-6-3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT计算机科学的课程表&lt;/a&gt;，可以跟我下面列出的课程做对照。（提示：这个链接已经更新过了，旧的链接挂了。我并没有检查课表有哪些修改。）&lt;/li&gt;
&lt;li&gt;你在学习过程中用了课本或者教学视频吗？所有的资料都在下面列出来了，如果你不确定，可以到下面的列表查看。&lt;/li&gt;
&lt;li&gt;你是按什么顺序来上这些课的？就是下面列出来的顺序，除了一些同时上的课程。当然，如果你按照这个顺序来上课，你就不用担心某些被依赖课程会被安排到后面。&lt;/li&gt;
&lt;li&gt;你是不是自己给考试评分的？是的。诚然，没有教授评分在一定程度上会有误差，但是大多数考试都是量化的问题，这些问题的答案都是有规律的，因此误差没那么大。我建议每个人都去检查一下我真正的考试回答，并跟官方提供的答案作对比。&lt;/li&gt;
&lt;li&gt;你是否相信人们应该不去上大学，而是做这个项目？当然不是。我上过大学，我并不后悔。我做这个项目的是想看看获得一次教育的时长、代价和常规性的预期能被压缩到多低。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;计算机总是令我神魂颠倒。从金融到社交，算法是构成人们生活大部分方面的隐藏语言。当今世界最大的变化就是由代码编写而成的人工智能事业的发展让我们能够通过计算机了解作为人类的意义。&lt;/p&gt;
&lt;p&gt;除了机器的诗意，计算机科学也是非常实践性的。财富被积累了，变革的火星在行行代码中闪耀。&lt;/p&gt;
&lt;p&gt;我总想掌握计算机语言，但是我并不想投入4年以及数十万没金来学习。&lt;/p&gt;
&lt;p&gt;我开启这项实验是因为我想告诉大家，完成一门学业，并不像有些人认为的那样，需要通过录取委员会和SAT考试，背负数千美元的债务，甚至耗费四年来慢慢学习。&lt;/p&gt;
&lt;p&gt;我会失败吗？当然有可能，这个世上许多比我聪明的人仍在类似MIT的地方挣扎于巨大的工作量之中。我还企图在没有人指导的情况下按四倍速来学习同样的内容。&lt;/p&gt;
&lt;p&gt;我会跟大家分享我在这一过程中的收获，这是我唯一能保证的。下面列出了我将学习的33门课程，每门课我都会做期终考试，诸位可以拿我的回答跟MIT官方的答案做对比。我也会把我的错误发布出来，大家不用怀疑我会把我的错误答案删除。&lt;/p&gt;
&lt;h2 id=&quot;MIT挑战之后的更新&quot;&gt;&lt;a href=&quot;#MIT挑战之后的更新&quot; class=&quot;headerlink&quot; title=&quot;MIT挑战之后的更新&quot;&gt;&lt;/a&gt;MIT挑战之后的更新&lt;/h2&gt;&lt;p&gt;由于我已经完成了这次挑战，我会在这里更新我上过的计算机科学相关的课程或者编写的相关程序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/blog/wordsmith-download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WordSmith&lt;/a&gt; 这是我写的开源免费的拼字游戏的AI。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;学习进度&quot;&gt;&lt;a href=&quot;#学习进度&quot; class=&quot;headerlink&quot; title=&quot;学习进度&quot;&gt;&lt;/a&gt;学习进度&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;8.01 物理1-经典力学&lt;ul&gt;
&lt;li&gt;我在七月份完成了这门课，这是一次预实验，用来检查我是不是准备好进行这次挑战了。这门课程很精彩，Walter Lewin教授在不遗漏知识点的情况下把物理讲得栩栩如生。提示：这门课已经被MIT删除了，大家可以去看&lt;a href=&quot;https://ocw.mit.edu/courses/physics/8-01-physics-i-fall-2003/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;另一个版本&lt;/a&gt; 。分数：5/5。&lt;ol&gt;
&lt;li&gt;&lt;del&gt;免费课程资料&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/801-notes.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于费曼学习方法的笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bit.ly/oG2Yhh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bit.ly/n8oa8f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;18.01 一元微积分&lt;ul&gt;
&lt;li&gt;这是我在MIT挑战中完成的第一门官方课程。紧凑的课程视频给了我良好的基础微积分的认知，展示了从基础的极限到高级积分法的知识。分数：4/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/mathematics/18-01-single-variable-calculus-fall-2006/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/1801-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/mathematics/18-01-single-variable-calculus-fall-2006/exams/prfinalsol.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;18.02 多元微积分&lt;ul&gt;
&lt;li&gt;这门课把一元积分的基本规则拓展到了多维层面。对于理解电、磁、光等3D相关的物体很有帮助。分数：4/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://ocw.mit.edu/courses/mathematics/18-02-multivariable-calculus-fall-2007/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/1802-notes.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/1802-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/1802-solutions.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;8.02 物理2-电磁学&lt;ul&gt;
&lt;li&gt;又一门Walter Lewin教授的物理课，示范实验非常棒。这门课对于专业细节非常严谨，同时也很贴近生活，每天讨论像彩虹和金属探测器这样的概念。提示：这门课也被MIT删除了，&lt;a href=&quot;http://ocw.mit.edu/courses/physics/8-02-physics-ii-electricity-and-magnetism-spring-2007/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;替代版本&lt;/a&gt;。分数：5/5。&lt;ol&gt;
&lt;li&gt;&lt;del&gt;免费课程资料&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/802-notes.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于费曼学习方法的笔记&lt;/a&gt;（巨大的pdf）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/802-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/physics/8-02-electricity-and-magnetism-spring-2002/exams/finalsol4.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;6.01 电子工程和计算机科学导论1&lt;ul&gt;
&lt;li&gt;这是一门很好的课程，但是由于这门课直接从面向对象入手，并且很少解释相关内容，我并不建议没有编程背景的人上这门课。我很享受核心课程里人工智能和状态机的高级概念的混合。这门课的课程讲义很棒，并且是免费的，但是里面内容的重点是机器人学，涉及到许多我接触不到的专业设备。（注：很多人指出，我期末考试的回答写的并不全面，你可以在这里读到我&lt;a href=&quot;https://www.scotthyoung.com/blog-new-new/2011/12/18/two-types-of-advice/comment-page-1/#comment-1258218&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入的回答&lt;/a&gt;)提示：这门课已经被MIT调换了，这是&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-01sc-introduction-to-electrical-engineering-and-computer-science-i-spring-2011/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;新的课程&lt;/a&gt;。分数：4/5。&lt;ol&gt;
&lt;li&gt;&lt;del&gt;免费课程资料&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/601-code.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载代码&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;工程：状态机库&lt;/li&gt;
&lt;li&gt;工程：贝叶斯状态预测器&lt;/li&gt;
&lt;li&gt;工程：A*寻路算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/601-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-01-introduction-to-electrical-engineering-and-computer-science-i-fall-2009/exams/MIT6_01F09_final_prob_sol.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;5.111 基础化学&lt;ul&gt;
&lt;li&gt;介绍了量子化学、路易士电子点图、酸碱和氧化还原反应，还包括了高级的过度金属和晶体场理论的知识。不幸的是，这门课并没有可行的期末考试，我不得不用期中的练习来评估自己。分数：4/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/chemistry/5-111-principles-of-chemical-science-fall-2008/index.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/5111-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/chemistry/5-111-principles-of-chemical-science-fall-2008/exams/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;7.012 生物学导论&lt;ul&gt;
&lt;li&gt;非常棒的生物课，这门课从实验者的角度阐述了生物化学、免疫学、基因学和生态学的基础知识。课本也是个很好的补充，展示了发现者的思维模式。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/biology/7-014-introductory-biology-spring-2005/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/7014-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/biology/7-014-introductory-biology-spring-2005/exams/final_handout.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;18.03 微分方程&lt;ul&gt;
&lt;li&gt;微积分的扩展。微分方程让你能够对复杂系统建模和分析。微分方程对于电子工程学很重要，对于理解电路、信号和系统有帮助。课程相关的视频讲座严重偏离了课程的内容，导致我浪费了不少时间。分数：3/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/mathematics/18-03-differential-equations-spring-2010/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/1803-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;，&lt;a href=&quot;http://ocw.mit.edu/courses/mathematics/18-03-differential-equations-spring-2010/exams/MIT18_03S10_prfinal.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/mathematics/18-03-differential-equations-spring-2010/exams/MIT18_03S10_prfinals.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;6.02 电子工程和计算机科学导论2&lt;ul&gt;
&lt;li&gt;这门课比较难上，因为MIT的开源课程平台没有包含这门课。学习这门课意味着我要筛选MIT的公共文档，从其最深处找出课程讲义和考试。后果就是其中一个重要的章节——滤波器设计——完全遗失了，我无法完成相关的实验和考试。这门课也没有期末考试，我把三次期中考试的成绩合起来整体做了课程评分。分数：3/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://web.mit.edu/6.02/www/s2009/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/602-labs.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实验作业（非常大）&lt;/a&gt;，&lt;a href=&quot;http://web.mit.edu/6.02/www/s2009/handouts.html#labs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;作业指导&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/602-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/602-solutions.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;6.042J 计算机数学&lt;ul&gt;
&lt;li&gt;图论、数论、证明、概率论、计算只是这门妙到毫巅的课程的一小部分。这门课的视频课程不多，但是免费的课本非常引人入胜。练习和挑战的资源倒是很丰富。分数：5/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-042j-mathematics-for-computer-science-spring-2010/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/6042J-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;，&lt;a href=&quot;https://www.scotthyoung.com/mit/6042J-notes.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-042j-mathematics-for-computer-science-fall-2005/exams/finalsol.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;6.006 算法简介&lt;ul&gt;
&lt;li&gt;算法和复杂理论的介绍。这门课提供了把算法设计概念（动态规划、贪心算法等）应用到实际编程中的机会，弥补了6.042J课程的缺失。不幸的是，在完成期末考试之前我没能发现试卷内容的不全的，所以我把我做的小测验包含了进来。我完成了大部分作业，但是没有答案，所以我没有对它们评分。分数：4/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-spring-2008/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/6006-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;期末考试&lt;/a&gt;，&lt;a href=&quot;https://www.scotthyoung.com/mit/6006-quiz.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;小测验&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/6006-pset.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;习题集&lt;/a&gt;，&lt;a href=&quot;https://www.scotthyoung.com/mit/6006-code.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的代码&lt;/a&gt;，&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-spring-2008/assignments/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT的文件和问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-spring-2008/exams/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;18.06 线性代数&lt;ul&gt;
&lt;li&gt;完美的授课视频和丰富的课程材料使这门课程变成MIT公开课程平台上最容易理解的一门课。Gilbert Strang教授给予了流畅易懂的讲解。我第一次考试正确率只有56%，所以我又花了一天完成了一份分数高一点的回答。分数：5/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/1806-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://web.mit.edu/18.06/www/Spring98/Solns/final-solu-98.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;6.041 概率系统分析&lt;ul&gt;
&lt;li&gt;概率论的一门课，这门课用微积分来解决比6.042J更加复杂的概率论问题。这门课的课本是专门为课程而设计的，所以非常有帮助。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-041-probabilistic-systems-analysis-and-applied-probability-spring-2006/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/6041-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-041-probabilistic-systems-analysis-and-applied-probability-spring-2006/exams/final_sol.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;6.002 电路与电子学&lt;ul&gt;
&lt;li&gt;这门课包含了数字电路和模拟电路的基本原理。考试很有难度，评分的是我超时的第一次考试。不幸的是，这门课的官方答案是MIT不公开的内容，所以我没法提供链接。这门课是许多电子工程科目的基础课程，所以我很确定其核心概念以后的考试中会碰到很多次。分数：4/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-002-circuits-and-electronics-spring-2007/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/6002-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;6.046J 算法的设计与分析&lt;ul&gt;
&lt;li&gt;这么久以来我最喜欢的课程之一！这门课给出了比6.006更高级的算法概念，例如证明特定的问题的NP完备性、近似算法、加密算法、亚线性算法和并行处理。我还是得小心应对，因为开源课程平台的这门课早于6.006被添加进MIT的课程列表，这门公开课比当前课表的版本容易很多。分数：5/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://courses.csail.mit.edu/6.046/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/6046J-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stellar.mit.edu/S/course/6/fa11/6.046/courseMaterial/topics/topic3/exam/final_fall09_solutions/final_fall09_solutions.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;6.304 人工智能&lt;ul&gt;
&lt;li&gt;很棒的课程，涵盖了多种不同的AI技术的调研，包括搜索、约束传播、神经网络、核机器（kernel machines）、概念学习和自然语言处理。我完成了六次作业，并为此先学习了编程语言Scheme。考试的难点之一在于这门课的教学大纲非常丰富，包含了多种技术，每节课的侧重点也各有不同。分数：5/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-034-artificial-intelligence-fall-2010/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/6034-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/6034-code.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的作业&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/6034-exam-sol.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;6.003 信号与系统&lt;ul&gt;
&lt;li&gt;这门课讲了信号与系统分析的基本原理，扩展了18.03初次讨论的数学技术。这门课不仅对电路有用，而且对于理解调频、音频过滤、降噪甚至包括图像分析和处理的基本原理有很大的帮助。这也是我挂掉的第一门课，还好在第二次尝试时我把正确率提高到69%。提示：这门课已经不可用了，&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-003-signals-and-systems-fall-2011/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;替代版本&lt;/a&gt;。分数：4/5。&lt;ol&gt;
&lt;li&gt;&lt;del&gt;免费课程资料&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/6003-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-003-signals-and-systems-spring-2010/exams/MIT6_003S10_final_F07_sol.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;6.004 计算结构&lt;ul&gt;
&lt;li&gt;电子工程和计算机科学的交叉课程。设计项目包含了门级CPU的规范，这是用来搭建计算机的电子元件。这门课的缺点是缺少相关的课程材料，但是作业和实验很给力。分数：4/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-004-computation-structures-spring-2009/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/6004-code.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实验和工程&lt;/a&gt;（注：运行这些文件需要BSim和JSim，都可以在课程页面免费下载）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/6004-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://6004.csail.mit.edu/currentsemester/OldQuizzes/quizzes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;24.241 逻辑学1&lt;ul&gt;
&lt;li&gt;命题演算和谓词演算入门及其衍生系统和理论的证明。我发现这门课很枯燥，很理论性，但它确实提供了严密的论证方法的练习，不像计算机科学的课程那样随意。坏消息是，考试答案是非公开的，我不能在这里发布。分数：3/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/linguistics-and-philosophy/24-241-logic-i-fall-2009/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/24241-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;14.01 微观经济学原理&lt;ul&gt;
&lt;li&gt;我在获取商学院学位时就上过微观经济学的课程，所以这门课对我来说主要目的是回顾。MIT比我的母校拥有更强的数学基础，因此看到许多概念的严谨科学的定义对我来说也是耳目一新。我花了短短四天来学习这门课，所以考试中大部分错误源于对未提供的专业定义和公式的遗忘。分数：3/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/economics/14-01-principles-of-microeconomics-fall-2007/index.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/1401-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/economics/14-01-principles-of-microeconomics-fall-2007/exams/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;6.003 计算机系统工程&lt;ul&gt;
&lt;li&gt;非常有用的课程，讲述了计算机网络、加密、客户端/服务器架构和互联网的基本原理。我发现有几节课跟6.004和6.02重复了，但还是很有用。我在读作业的时候不够专注，它们包含了海量的知识。分数：4/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-033-computer-system-engineering-spring-2009/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/6033-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-033-computer-system-engineering-spring-2009/exams/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;6.013 电磁学及应用&lt;ul&gt;
&lt;li&gt;毫无疑问，这是至此以来最难的一门课程。这门课大量使用了矢量计算、变换式和复数计法，拓展了8.02电磁学课程中的基本原理。如果你想尝试这门课，先去学习基础课程6.003、6.002、18.02、18.03和8.02是不错的选择。我险之又险地通过了这门课，所以这门课绝对是我未来会温故而知新的内容，其中包含了不少有趣的想法。分数：3/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-013-electromagnetics-and-applications-spring-2009/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/6013-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-013-electromagnetics-and-applications-spring-2009/exams/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;14.02 宏观经济学原理&lt;ul&gt;
&lt;li&gt;本科的时候我也学了宏观经济学，所以这节课也是回顾。尽管如此，我觉得MIT的课程和教材更加易懂。如果你想对经济学有个整体的了解，这是不错的选择。提示：MIT更换了这节课，&lt;a href=&quot;http://ocw.mit.edu/courses/economics/14-02-principles-of-macroeconomics-spring-2014/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;新的版本&lt;/a&gt;分数：3/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/economics/14-02-principles-of-macroeconomics-fall-2009/index.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/1402-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/economics/14-02-principles-of-macroeconomics-fall-2009/exams/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;24.242 逻辑学2&lt;ul&gt;
&lt;li&gt;这门课完全基于8次家庭作业，所以我经历的大量测试材料都比其他课程要弱。尽管如此，我还是喜爱这门课，因为哥德尔不完备定理是我见过的最深刻的思想。分数：5/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://courses.csail.mit.edu/6.046/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/24242-work.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/linguistics-and-philosophy/24-242-logic-ii-spring-2004/assignments/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;6.011 通讯、控制和信号入门&lt;ul&gt;
&lt;li&gt;6.003，信号与系统课程的拓展。这门课把信号分析和过滤拓展成状态图和随机信号。随机信号的引入对于处理噪音非常有用，所以许多6.003里理想化的概念变得更加切实可行。免费的课本和讲义非常有用。分数：4/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-011-introduction-to-communication-control-and-signal-processing-spring-2010/index.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/24242-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-011-introduction-to-communication-control-and-signal-processing-spring-2010/exams/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;24.244 模态逻辑&lt;ul&gt;
&lt;li&gt;模态逻辑是可能性和必然性的逻辑，扩展了基本的谓词演算。这是一项很有趣的逻辑，取决于采用的公理（道义、真势模态、时态等等），可以表现成不同的逻辑系统。期末考试是课外开卷考试，所以我花了两天时间完成了它。分数：3/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/linguistics-and-philosophy/24-244-modal-logic-fall-2009/index.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/24244-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/linguistics-and-philosophy/24-244-modal-logic-fall-2009/exams/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;14.20 产业组织学&lt;ul&gt;
&lt;li&gt;经济学课程，通过假设完全竞争或垄断来简化分析。这门课移除了商行如何从战略上跟另一家商行竞争的设想和考虑。这门课完全点燃了我学习博弈论的兴趣。不幸的是，我没意识到期末考试的内容受限于课程内容，我只能尽力而为。分数：3/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/economics/14-20-industrial-organization-and-public-policy-spring-2003/readings/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/1420-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/economics/14-20-industrial-organization-and-public-policy-spring-2003/exams/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;14.23 政府的产业条例&lt;ul&gt;
&lt;li&gt;这门课的内容和14.20很像，但是这门课侧重于历史背景和政治格局，而不是博弈论。有趣的课程，课本阅读的部分相当冗长（近900页），但是数学分析的水平较低，所以还是比较易读的。分数：3/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/economics/14-23-government-regulation-of-industry-spring-2003/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/1423-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/economics/14-23-government-regulation-of-industry-spring-2003/exams/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;14.48J 教育经济学&lt;ul&gt;
&lt;li&gt;鉴于我挑战本身的性质，这门课非常有趣，揭示了多种教育理论。大多数课程感觉更像是基础的计量经济学的讨论，因为很多核心思想都是没有结论的（更小的课程更好吗？折扣券方案可行吗？）。这门课也讲述了教育的标准人力资本理论和信号效果理论的不同。但是，仍然没有定论。分数：3/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/urban-studies-and-planning/11-126j-economics-of-education-spring-2007/syllabus/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/1448J-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/urban-studies-and-planning/11-126j-economics-of-education-spring-2007/exams/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;6.005 软件构建基础&lt;ul&gt;
&lt;li&gt;这是MIT规定的软件开发课程。这门课挺难的，不是因为有什么智力要求，而是因为工作量繁重。这门课由3个团队项目，3个个人项目以及一些实验课组成。我当时很犹豫要不要上这门课，因为这次挑战的时间有限，很难上这样的课。但是最终我发现，最简单的方式就是做完所有的事情。&lt;/li&gt;
&lt;li&gt;我花了大概三周的时间成功上完这门课，零零散散耗费了两个月。虽然很费时，但是这门课是最有回报的课程。我本想在每个项目上花费更多的时间补充更多特性，特别是最后的那个用Scratch做的即时通讯应用。如果你在编程方面刚入门，想学习高级的设计思想，写出优秀的代码而不是能够运行的代码，这门课是很棒的选择。&lt;/li&gt;
&lt;li&gt;我把我写的所有的项目都发布在这里，需要安装Java环境才能运行。我也把我做的三个设计项目上传了（扫描之后清晰度降低了，很抱歉！）。分数：5/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-005-elements-of-software-construction-fall-2008/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/6005-code.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;所有的代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/6005-work.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;三个设计项目&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/6005-work.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT提供的资料和作业&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;6.801 计算机视觉&lt;ul&gt;
&lt;li&gt;这门课讲述如何用算法去看，主要的背景就是通过看到的图像指导机器人运作。包括二进制图像处理、边缘检测、高斯扩展表面、方向、摄影测量等主题。这门课由两次课外考试来评分，并且是由两门研究生级别的课程合成的一门课。&lt;/li&gt;
&lt;li&gt;总之，这门课很有挑战性，使用了傅里叶分析、矢量计算、线性代数、二次规划算法以及变分法等技术方法，所以这门课大概是应用数学相关最难的一门课了。很可惜没有编程的作业，不然一定会很有趣。分数：5/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-801-machine-vision-fall-2004/lecture-notes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/6801-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-801-machine-vision-fall-2004/exams/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT官方答案（和问题）&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;6.837 计算机图形学&lt;ul&gt;
&lt;li&gt;这门课讲述了计算机图形学的基本原理，主要讲了射线追踪，当然扫描线方法也讲了。这门课基本由作业来评分（本来有两次小考的，但是没有提供答案，所以没用它们来计分）。从简单的光线投射和平面着色开始，作业逐渐包含了毛面着色、反射模糊、投射阴影、带有折射指数的透明表面、镜面反射以及过程贴图。一个网格加速数据结构的过程也完成了，它没有任何视觉效果，却大大加快了相对缓慢的射线的图像路径。&lt;/li&gt;
&lt;li&gt;具体的编程环境写在了代码的README.rtf文件里。文件比较大，包含了渲染出的图片，这样不用运行代码就能看到问题需求的输出了。（作为对比，MIT的官方输出在sample_res.pdf里）。提示：我之前上的课被替换了，&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-837-computer-graphics-fall-2012/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;新的版本&lt;/a&gt;。分数：5/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-837-computer-graphics-fall-2003/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/6837-code.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-837-computer-graphics-fall-2003/assignments/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT提供的代码（以及示例答案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;COSC 545 计算理论&lt;ul&gt;
&lt;li&gt;这门课不是MIT的课程，而是乔治城大学Cal Newport教授的计算理论的研究生课程。在享受完MIT的两门算法课之后，这是我非常想学习的主题，但是MIT复杂的理论课程缺乏任何可用的评分工具。这门课很有趣的思想就是哪些问题可以被算法解决（这意味着处理任何形式的问题都有一个过程），以及处理确定类型的问题所需的速度和内存限制。&lt;/li&gt;
&lt;li&gt;这门课还包含了对于NP问题（P=NP?）的宽泛讨论。这是数学界最重要且悬而未决的问题，其答案会对整个社会产生巨大的影响。尽管已经研究了数十年，以及100万美金的激励，这个问题仍然没能有答案。分数：5/5。&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://cs.georgetown.edu/~cnewport/teaching/cosc545-spring12/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;免费课程资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scotthyoung.com/mit/COSC-exam.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的考试结果&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;MIT挑战的常问问题&quot;&gt;&lt;a href=&quot;#MIT挑战的常问问题&quot; class=&quot;headerlink&quot; title=&quot;  MIT挑战的常问问题&quot;&gt;&lt;/a&gt;  MIT挑战的常问问题&lt;/h2&gt;&lt;p&gt;  Q）你遵守了哪些规则？&lt;/p&gt;
&lt;p&gt;  因为我不是MIT的学生（也不隶属于MIT），所以我自己制定了一套公平可行的规则。规则很简单：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 我完成一门课的标准是通过期末考试（一般高于50分就可以了，虽然我想拿更高的分数。）
2. 考试的限制是一样的，不能提前看题目，不能带课程相关的材料，一样的时长限制（默认是三小时）。
3. 我根据MIT的官方答案给自己打分，我把回答和答案都发布到这里，任何人都可以再次检查我的评分手段。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  记住，这只是我这次挑战的最低要求。对于含有重要的编程部分的课程，我尽可能完成代表性的编程作业。&lt;/p&gt;
&lt;p&gt;  Q）你完成了所有的作业、论文和项目吗？&lt;/p&gt;
&lt;p&gt;  对于数学或者理论课程来说，期末考试是很重要的评分手段。我仍然会做一部分作业和测验来为期末考试做准备。不过由于在这次挑战中我没法维持一个统一的标准（许多课程要么不可用，要么没法评分），我没有很认真地去做它们。&lt;/p&gt;
&lt;p&gt;  对于含有大量编程或实际设计的课程，我尽量去完成最多的作业。但是它们很难做评分，我还是依赖于期末考试。&lt;/p&gt;
&lt;p&gt;  Q）你的课程表和MIT的是否不一样？&lt;/p&gt;
&lt;p&gt;  我花了差不多一个月的时间来拼凑一个MIT计算机科学实际课表的镜像。很可惜我没法完美地完成，因为有些课程（包括实验和研究课）很难评分，另外一些网上没有资源。&lt;/p&gt;
&lt;p&gt;  这次挑战，我课程表的总学时跟MIT的学位学时是一样的，所以当我没法上某一门课的时候，我就换成一门近似的课程。就学习的知识而言，我的课程表跟MIT的课程表很像了。&lt;/p&gt;
&lt;p&gt;  唯一的区别就是MIT的选修课。我也上了不少非计算机科学的课程，来模仿MIT的人文、艺术、社科的要求。因为MIT的线上艺术课程的资料比社科的课程差远了，所以我选的课程跟MIT的课程并不完全匹配。&lt;/p&gt;
&lt;p&gt;  这是&lt;a href=&quot;http://web.mit.edu/catalog/degre.engin.ch6.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MIT计算机科学的课表&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;  Q）如果你挂科了，你会怎么做？&lt;/p&gt;
&lt;p&gt;  鉴于我正在做一次尝试，所以我觉得挂科是无法避免的。我的主要要求是通过期末考试，所以如果我挂了，我允许自己过段时间再试一次。&lt;/p&gt;
&lt;p&gt;  对于有多次考试的课程，我的对策就是先挂一次，这样我在后续的课程上会更高效。这跟在大学里很不一样，不及格不再是一种挫折。这就是自学的优势之一。&lt;/p&gt;
&lt;p&gt;  Q）你为什么做这个挑战？你只是爱学习吗？&lt;/p&gt;
&lt;p&gt;  没有人喜欢学习，但是每个人都想变得更聪明。学习，得到更强的洞察力，对于某些主题变得更睿智，这是很有价值的。很遗憾，很多人在经历过很多年惩罚式的教育后，都已经忘记了这一点。&lt;/p&gt;
&lt;p&gt;  我承认，想在12个月内学完四年的内容有些疯狂，或者说傲慢。但是我真正的动机就是希望告诉大家，快速的学习是有可能的，与此同时还能获得更多的快乐。&lt;/p&gt;
&lt;p&gt;  Q）这样做你能获得毕业文凭吗？&lt;/p&gt;
&lt;p&gt;  不能，这就是问题所在。我们社会错误地把知识和文凭等同起来。&lt;/p&gt;
&lt;p&gt;  得到一纸文凭很不错，对于许多工作来说，这是完全必要的。但是这种强烈的等价使得人们忘记了两者之间是有区别的。&lt;/p&gt;
&lt;p&gt;  作为一个作家和生意人，我已经有了自己的事业。我从来没想过去大公司工作，那里的HR可能会审议我匮乏的文凭。对我来说，我学习计算机科学就是想为以后开展新事业或者创业时做准备。&lt;/p&gt;
&lt;p&gt;  我不反对大学。对我来说，大学经历很美好，很有价值，对每个人来说都是这样。我只是希望我给出这样一种选择，那些觉得当下的政策不适合自己的人可以有新路可走。&lt;/p&gt;
&lt;p&gt;  Q）这仅仅是为了通过考试吗？&lt;/p&gt;
&lt;p&gt;  不是，但区别很细微。许多课程基于之前学过的概念，所以我的目标是尽可能地去理解每门课。临时抱佛脚只是一种为了考试死记硬背然后很快遗忘的方法。理解更难，却并不会耗费更多时间（如果每门课都为后一门做好铺垫）。&lt;/p&gt;
&lt;p&gt;  更新：最初的四节课，我同时学三到四门。虽然这导致我在回顾知识上的时间比正常的少很多（一个月而不是一学期），这却提升了重复的好处。&lt;/p&gt;
&lt;p&gt;  最终，因为最初的课程大部分都是在为后续更难的课程打基础，我的理解能力和考试表现都上了一个台阶，这些就是我通过考试的工具。&lt;/p&gt;
&lt;p&gt;  Q）关于计算机科学，你以前有哪些经验？&lt;/p&gt;
&lt;p&gt;  我在高中的时候写了挺多代码的，大多数是创造电脑游戏。另外，我在曼尼托巴大学商学院上学的时候，也上了四年学制的计算机科学课程。所以确实，我之前有编程的经验，在这次挑战中占了优势。话虽如此，我的技能水平可能跟那些去MIT上学的计算机科学的学生相距不远。&lt;/p&gt;
&lt;p&gt;  还有一点就是我在2011年七月就上了第一门课，8.01经典力学，作为预测试课程。因此我在这12个月内实际学习的课程数是32门课。&lt;/p&gt;
&lt;p&gt;  Q）我是博客主/记者，如何跟你联系，分享故事？&lt;/p&gt;
&lt;p&gt;  通过邮箱challenge@scotthyoung.com，或者通过&lt;a href=&quot;https://www.scotthyoung.com/blog-new-new/about-and-contact-info/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里的表格&lt;/a&gt;。接下来我会变得很忙（显而易见），所以很抱歉我在短期内不能很迅速地查看邮件。我在学习一门课程时通常不在线。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;  长按下方二维码关注公众号&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;./qrcode.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;译者注：本文译自&lt;a href=&quot;https://www.scotthyoung.com/blog/myprojects/mit-challenge-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scott H. Young的博客&lt;/a&gt;，Scott
    
    </summary>
    
      <category term="CS Learning" scheme="http://chenyuxiaodhr.github.io/categories/CS-Learning/"/>
    
    
      <category term="CS Learning" scheme="http://chenyuxiaodhr.github.io/tags/CS-Learning/"/>
    
  </entry>
  
  <entry>
    <title>ToLua读取bundle中文件出错的坑</title>
    <link href="http://chenyuxiaodhr.github.io/zh-CN/Unity3D/Unity-Bug-When-Read-Bundle-With-ToLua/"/>
    <id>http://chenyuxiaodhr.github.io/zh-CN/Unity3D/Unity-Bug-When-Read-Bundle-With-ToLua/</id>
    <published>2017-01-06T07:44:54.000Z</published>
    <updated>2017-01-06T08:47:13.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;问题简述&quot;&gt;&lt;a href=&quot;#问题简述&quot; class=&quot;headerlink&quot; title=&quot;问题简述&quot;&gt;&lt;/a&gt;问题简述&lt;/h2&gt;&lt;p&gt;在使用ToLua的LuaFramework作为代码热更框架，进行AssetBundle打包的时候，有时会莫名其妙出现Lua文件读不出来的问题，即require了某个Lua文件，且文件确实存在，却报出该文件的全局变量为nil的error。&lt;/p&gt;
&lt;h2 id=&quot;问题分析&quot;&gt;&lt;a href=&quot;#问题分析&quot; class=&quot;headerlink&quot; title=&quot;问题分析&quot;&gt;&lt;/a&gt;问题分析&lt;/h2&gt;&lt;p&gt;经过仔细的查看和debug，发现是&lt;strong&gt;同一个文件夹&lt;/strong&gt;下存在两个Lua文件的文件名发生了尾部包含的关系，例如文件&lt;code&gt;b.lua&lt;/code&gt;和&lt;code&gt;aaaaaab.lua&lt;/code&gt;，当require文件&lt;code&gt;b.lua&lt;/code&gt;时，实际获取出来的却是&lt;code&gt;aaaaaab.lua&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;原因所在&quot;&gt;&lt;a href=&quot;#原因所在&quot; class=&quot;headerlink&quot; title=&quot;原因所在&quot;&gt;&lt;/a&gt;原因所在&lt;/h2&gt;&lt;p&gt;发现了这个问题之后（鬼知道我经历了什么才查出来……），就去翻了一下LuaFramework的代码，发现在ToLua/Core/LuaFileUtils.cs中，读取bundle中的文件的函数是这样写的：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] ReadZipFile(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; fileName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pos &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        zipName = fileName.Substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, pos);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        zipName = zipName.Replace(&lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;_&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        zipName = &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;.Format(&lt;span class=&quot;string&quot;&gt;&quot;Lua_&amp;#123;0&amp;#125;&quot;&lt;/span&gt;, zipName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fileName = fileName.Substring(pos + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	zipMap.TryGetValue(zipName.ToLower(), &lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt; zipFile);        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (zipFile != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; UNITY_5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;[] names = zipFile.GetAllAssetNames();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; names.Length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (names[i].EndsWith(fileName.ToLower() + &lt;span class=&quot;string&quot;&gt;&quot;.bytes&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            fileName = names[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		TextAsset luaCode = zipFile.LoadAsset&amp;lt;TextAsset&amp;gt;(fileName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	TextAsset luaCode = zipFile.Load(fileName, &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(TextAsset)) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; TextAsset;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; buffer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意中间的for循环，使用了names[i].EndsWith(fileName.ToLower() + “.bytes”)。&lt;br&gt;首先要明确一点，LuaFramework在对Lua文件进行打包时，会把每个文件夹打成一个bundle，因此上述代码中的zipFile就是某个文件夹的bundle。在对names和fileName进行匹配时，使用了&lt;strong&gt;EndsWith&lt;/strong&gt;，而bundle内的文件是按&lt;strong&gt;字母表顺序&lt;/strong&gt;排列的。因此&lt;code&gt;require &amp;quot;b.lua&amp;quot;&lt;/code&gt;时，EndsWith(“b.lua”)，就读到了&lt;code&gt;aaaaaab.lua&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h2&gt;&lt;p&gt;一，这个问题存在于LuaFramework 1.0.5.203之前的版本，最新的版本已经修改了Lua文件的打包和读取的方式，所以直接升级框架版本即可解决这个巨坑。&lt;/p&gt;
&lt;p&gt;二，升级框架版本本身可能存在隐患，导致代码不稳定。既然已经定位到问题，其实直接修改就可以了。&lt;/p&gt;
&lt;p&gt;虽然不是很清楚为什么使用EndsWith来做文件的匹配，大概可以猜到，应该是为了适配多平台导致的bundle内部文件路径不统一的问题。以下修改代码暂时只在PC和Android平台做了测试：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] ReadZipFile(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; fileName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pos &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        zipName = fileName.Substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, pos);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        zipName = zipName.Replace(&lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;_&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        zipName = &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;.Format(&lt;span class=&quot;string&quot;&gt;&quot;Lua_&amp;#123;0&amp;#125;&quot;&lt;/span&gt;, zipName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//fileName = fileName.Substring(pos + 1); //需要读取整体路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!fileName.EndsWith(&lt;span class=&quot;string&quot;&gt;&quot;.lua&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fileName += &lt;span class=&quot;string&quot;&gt;&quot;.lua&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//bundle内部文件读取需要从assets开始读起&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//LuaFramework 1.0.1版本在打bundle时先copy到了LuaTemp文件夹下再进行打包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//因此此处我的路径需要加上&quot;assets/luatemp/&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//具体的路径可以自行debug获取和修改&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fileName = &lt;span class=&quot;string&quot;&gt;&quot;assets/luatemp/&quot;&lt;/span&gt; + fileName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    zipMap.TryGetValue(zipName.ToLower(), &lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt; zipFile);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (zipFile != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; UNITY_5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fileName = fileName.ToLower() + &lt;span class=&quot;string&quot;&gt;&quot;.bytes&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TextAsset luaCode = zipFile.LoadAsset&amp;lt;TextAsset&amp;gt;(fileName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TextAsset luaCode = zipFile.Load(fileName, &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(TextAsset)) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; TextAsset;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; buffer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;LuaFramework本身提供了Lua和C#交互的基础功能，并且扩展了热更新、诸多管理器、消息分发器等功能，当然作为一款开源工具，仍存在些许问题，我踩过其中一些坑，这篇总结的坑连踩了两次，本着事不过三的原则，记录下来，也是一劳永逸地解决了这个问题。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题简述&quot;&gt;&lt;a href=&quot;#问题简述&quot; class=&quot;headerlink&quot; title=&quot;问题简述&quot;&gt;&lt;/a&gt;问题简述&lt;/h2&gt;&lt;p&gt;在使用ToLua的LuaFramework作为代码热更框架，进行AssetBundle打包的时候，有时会莫名其妙出现Lua文
    
    </summary>
    
      <category term="Unity3D" scheme="http://chenyuxiaodhr.github.io/categories/Unity3D/"/>
    
    
      <category term="Game Development" scheme="http://chenyuxiaodhr.github.io/tags/Game-Development/"/>
    
      <category term="Unity3D" scheme="http://chenyuxiaodhr.github.io/tags/Unity3D/"/>
    
      <category term="ToLua" scheme="http://chenyuxiaodhr.github.io/tags/ToLua/"/>
    
  </entry>
  
  <entry>
    <title>Unity脚本修改prefab</title>
    <link href="http://chenyuxiaodhr.github.io/zh-CN/Unity3D/Unity-Modify-Prefabs-by-Scripts/"/>
    <id>http://chenyuxiaodhr.github.io/zh-CN/Unity3D/Unity-Modify-Prefabs-by-Scripts/</id>
    <published>2016-11-03T14:17:16.000Z</published>
    <updated>2016-11-03T14:36:56.000Z</updated>
    
    <content type="html">&lt;p&gt;获取prefab&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GameObject go = AssetDatabase.LoadAssetAtPath(filePath, &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(GameObject)) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; GameObject;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对GameObject修改属性就可以了。&lt;/p&gt;
&lt;p&gt;最后一定要加上&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;EditorUtility.SetDirty(go);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;否则修改后的prefab无法保存。&lt;/p&gt;
&lt;h2 id=&quot;拓展知识&quot;&gt;&lt;a href=&quot;#拓展知识&quot; class=&quot;headerlink&quot; title=&quot;拓展知识&quot;&gt;&lt;/a&gt;拓展知识&lt;/h2&gt;&lt;p&gt;&lt;code&gt;EditorUtility.SetDirty&lt;/code&gt;在Unity5.3之前是标记对象&lt;strong&gt;被修改（Dirty）&lt;/strong&gt;的主要方法。但从5.3开始，随着多场景编辑（Multi-Scene Editing）的引入，此函数不应再用于修改场景中的对象。&lt;/p&gt;
&lt;p&gt; 相反，您应该在对对象进行更改之前使用&lt;code&gt;Undo.RecordObject&lt;/code&gt;。 这将标记对象的场景被修改了，并在编辑器中提供一个&lt;strong&gt;可撤销条目（undo entry）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果您正在修改场景中的文件，并且&lt;strong&gt;不想&lt;/strong&gt;为修改添加可撤销条目，则应使用&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;EditorSceneManager.MarkSceneDirty&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果使用自定义编辑器修改组件或资产上的序列化属性，则应使用&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pSerializedObject.FindProperty]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SerializedObject.Update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EditorGUILayout.PropertyField&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SerializedObject.ApplyModifiedProperties&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这将标记修改的对象为“Dirty”（被修改），并为您创建&lt;strong&gt;可撤消状态（Undo states）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;因此，您应该使用此功能的唯一剩余情况是，如果您通过某些其他方式修改非场景对象，并且特别&lt;strong&gt;不希望&lt;/strong&gt;为您的修改创建一个可撤销条目。 这是罕见的，除非你非常确定要求这，你可能不应该使用这个命令！&lt;/p&gt;
&lt;p&gt;Unity内部使用&lt;strong&gt;“Dirty”&lt;/strong&gt;标志来确定资产何时更改并需要保存到磁盘。&lt;/p&gt;
&lt;p&gt;以上内容翻译自Unity文档：&lt;a href=&quot;https://docs.unity3d.com/ScriptReference/EditorUtility.SetDirty.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EditorUtility.SetDirty&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;从上面的文档可以得出一个简单的结论：&lt;code&gt;EditorUtility.SetDirty&lt;/code&gt;可以标记脚本作出的修改，但是不能让你撤销这些修改；&lt;code&gt;Undo.RecordObject&lt;/code&gt;标记的修改可以被撤销，但不能修改非场景对象。&lt;/p&gt;
&lt;p&gt;至于到底选择哪个方法去标记修改，就看具体的需求了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;获取prefab&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;
    
    </summary>
    
      <category term="Unity3D" scheme="http://chenyuxiaodhr.github.io/categories/Unity3D/"/>
    
    
      <category term="Game Development" scheme="http://chenyuxiaodhr.github.io/tags/Game-Development/"/>
    
      <category term="Unity3D" scheme="http://chenyuxiaodhr.github.io/tags/Unity3D/"/>
    
  </entry>
  
  <entry>
    <title>游戏开发之状态机的实现与优化</title>
    <link href="http://chenyuxiaodhr.github.io/zh-CN/Game-Development/Finite-State-Machine-in-Game-Development/"/>
    <id>http://chenyuxiaodhr.github.io/zh-CN/Game-Development/Finite-State-Machine-in-Game-Development/</id>
    <published>2016-03-15T13:46:53.000Z</published>
    <updated>2017-03-28T08:31:34.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;你是否还在面对乱作一团的代码束手无策？你是否仍然觉得复杂的逻辑无从下手？你是否觉得游戏AI高端得毫无头绪？本文将以一个复杂的弹窗逻辑和RPG游戏挂机AI的实现为案例，讲述状态机的概念及其写法。&lt;/p&gt;
&lt;p&gt;本文分为以下部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;有限状态机（finite-state machine）&lt;/strong&gt;：对状态机一些概念的解释。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;案例对照&lt;/strong&gt;：将一个复杂弹窗的普通写法和状态机编程两种实现进行对比。这里状态机的实现是多个if-else的最简单的状态机实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有限状态机的优势&lt;/strong&gt;：通过上面的对比总结状态机的优势。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如何优雅地使用状态机&lt;/strong&gt;：以游戏挂机自动刷怪的AI为例，提供状态模式的代码实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;状态机的使用场景&lt;/strong&gt;：对状态机的使用做了一些扩充。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;总结&lt;/strong&gt;：对本文内容的总结。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参考资料&lt;/strong&gt;：文中部分概念的来源以及扩展阅读的链接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对状态机一无所知的读者可以顺序看下去；写了不少逻辑，却依旧编不好繁复代码的，可以从&lt;strong&gt;案例对照&lt;/strong&gt;开始阅读，相信可以让你对编程有个新的把握；会用状态机，却用得不优雅的读者，可以直接空降&lt;strong&gt;如何优雅地使用状态机&lt;/strong&gt;，状态模式的实现在等着你钻研；会用一百种不同的方法花式写状态机的读者，可以直接去看文末的&lt;strong&gt;参考资料&lt;/strong&gt;，希望对你有所帮助~&lt;/p&gt;
&lt;h2 id=&quot;有限状态机（finite-state-machine）&quot;&gt;&lt;a href=&quot;#有限状态机（finite-state-machine）&quot; class=&quot;headerlink&quot; title=&quot;有限状态机（finite-state machine）&quot;&gt;&lt;/a&gt;有限状态机（finite-state machine）&lt;/h2&gt;&lt;p&gt;有限状态机，又称有限状态自动机，简称状态机，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型。[1]&lt;/p&gt;
&lt;p&gt;有限状态机可以将复杂的逻辑简化为有限个稳定状态，在稳定状态中判断事件。其中有限不是指有限次处理，而是有限个稳定状态，并且有限状态机是一个闭环系统，可以用有限的状态处理无尽的事务。&lt;/p&gt;
&lt;p&gt;例如，灯的开关就是一个非常简单的有限状态机。它有两种状态：开或关。这两个状态的切换是通过手指的输入产生的。打开开关，产生从关到开的状态变换；关闭开关，产生从开到关的状态变换。&lt;br&gt;&lt;img src=&quot;./chart1.jpg&quot; alt=&quot;light&quot;&gt;&lt;/p&gt;
&lt;p&gt;状态机由下列几部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;状态集(States)：包括现态和次态在内的一系列状态，用来描述状态机所处的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;事件(Event)：又被称为“条件”，当满足条件时，将会触发一个动作，或者执行一次状态的迁移。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;动作(Action)：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执行任何动作，直接迁移到新状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;转换(Transition)：通过转换函数将状态从现态迁移到次态的动作。迁移后次态变为现态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最著名的有限状态机可能是艾伦·图灵假想的设备——图灵机，他在1936年论文《关于可计算数字》中写道：这是一个预示着现代可编程计算机的机器，它们可以通过对无限长的磁带上的符号进行读写和擦除操作来进行任何逻辑运算。[2]&lt;/p&gt;
&lt;p&gt;有限状态机实际上是一个有向图，由状态节点和状态转义函数组成。因此，当游戏策划交给你一个模块的流程图时，完全可以将流程图简化成一个或多个状态图，并进行实现。&lt;/p&gt;
&lt;h2 id=&quot;案例对照&quot;&gt;&lt;a href=&quot;#案例对照&quot; class=&quot;headerlink&quot; title=&quot;案例对照&quot;&gt;&lt;/a&gt;案例对照&lt;/h2&gt;&lt;p&gt;下面，我讲列举非状态机和状态机编程两种代码进行对比。&lt;/p&gt;
&lt;p&gt;当我们写一个弹窗时，需求往往是这样：点击打开按钮，显示弹窗；点击关闭按钮，弹窗消失。这和本文一开始的电灯状态很相似，但这样一个简单的逻辑，并不需要使用复杂的状态机进行控制，我们可以直接对相应的按钮进行事件绑定。&lt;/p&gt;
&lt;p&gt;example 1:&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//MainUI.cpp init 函数内&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//打开按钮&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Button *openBtn = Button::create();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;openBtn-&amp;gt;addClickEventListener([=] (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	MyAlertDialog *dialog = MyAlertDialog::create();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dialog-&amp;gt;show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//MyAlertDialog.cpp init 函数内&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//关闭按钮&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Button *closeBtn = Button::create();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;closeBtn-&amp;gt;addClickEventListener([=] (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//关闭按钮在弹窗内部&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;dismiss();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但很多时候需求是复杂的，我们需要的弹窗可能是这样：弹窗开启前插入两个动画，动画间有0.5秒延迟，动画播完后1秒打开弹窗，弹窗打开后4s自动关闭或点击关闭按钮关闭，延迟2s后弹窗消失，关闭后主页产生变化。&lt;/p&gt;
&lt;p&gt;我们仍不使用状态机编程，最终代码如下：&lt;/p&gt;
&lt;p&gt;example 2:&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//MainUI.cpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; MainUI::init()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//打开按钮&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Button *openBtn = Button::create();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	openBtn-&amp;gt;addClickEventListener([=] (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		runActionBeforeShowDialog();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m_dialog = MyAlertDialog::create();&lt;span class=&quot;comment&quot;&gt;//调整为成员变量进行控制，需在头文件中声明并在构造中置为nullptr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m_dialog-&amp;gt;setDismissFunc(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::bind(&amp;amp;MainUI::dismissDialog, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//动画&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; MainUI::runActionBeforeShowDialog()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Action *action1 = SomeAction::create(&lt;span class=&quot;number&quot;&gt;2.0f&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Action *action2 = OtherAction::create(&lt;span class=&quot;number&quot;&gt;1.5f&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//第二个动画&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	CallFunc *callback = CallFunc::create(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::bind(&amp;amp;MainUI::showDialog, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Sequence *seq = Sequence::create(action, DelayTime::create(&lt;span class=&quot;number&quot;&gt;0.5f&lt;/span&gt;), action2, DelayTime::create(&lt;span class=&quot;number&quot;&gt;1.f&lt;/span&gt;), callback, &lt;span class=&quot;literal&quot;&gt;nullptr&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//增加延迟&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;runAction(seq);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//优化：把打开弹窗的代码整理成函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; MainUI::showDialog()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dialog-&amp;gt;show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; MainUI::dismissDialog()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dialog-&amp;gt;dismiss();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; something...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	scheduleOnce(...);&lt;span class=&quot;comment&quot;&gt;//关闭弹窗后新的定时器操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//MyAlertDialog.cpp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bool MyAlertDialog::init()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//关闭按钮&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Button *closeBtn = Button::create();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	closeBtn-&amp;gt;addClickEventListener([=] (this)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//延迟两秒关闭&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		scheduleOnce(std::bind(&amp;amp;MyAlertDialog::m_dismissFunc, this), 2.0f);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//延迟4s自动关闭,关闭延迟两秒程序员偷懒未做&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	scheduleOnce(std::bind(&amp;amp;MyAlertDialog::m_dismissFunc, this), 4.0f);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void setDismissFunc(std::function&amp;lt;void()&amp;gt; func)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m_dismissFunc = func;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实，在处理这样的逻辑时，我们已经将不同块的需求整理成了不同的状态，从弹窗打开到关闭无非经历了如下步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开始&lt;/li&gt;
&lt;li&gt;点击打开，显示动画&lt;/li&gt;
&lt;li&gt;动画结束，延迟1s，显示弹窗&lt;ul&gt;
&lt;li&gt;4s后自动开始关闭&lt;/li&gt;
&lt;li&gt;点击关闭按钮直接进入关闭&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;延迟2s，弹窗消失&lt;/li&gt;
&lt;li&gt;结束，MainUI处理其他逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是，由于没有引入状态机，上述代码从清晰简单的弹窗逻辑变成了充斥着回调和定时器的代码堆砌。如果此时流程中出现问题，很难迅速定位，导致整体效率的下降。&lt;/p&gt;
&lt;p&gt;根据上述步骤，列出状态表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;当前状态&lt;/th&gt;
&lt;th&gt;条件&lt;/th&gt;
&lt;th&gt;状态转换&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;开始&lt;/td&gt;
&lt;td&gt;点击开始按钮&lt;/td&gt;
&lt;td&gt;显示动画&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;显示动画&lt;/td&gt;
&lt;td&gt;1秒后自动切换&lt;/td&gt;
&lt;td&gt;弹窗开&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;弹窗开&lt;/td&gt;
&lt;td&gt;点击关闭或4秒后&lt;/td&gt;
&lt;td&gt;弹窗关&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;弹窗关&lt;/td&gt;
&lt;td&gt;2秒后&lt;/td&gt;
&lt;td&gt;弹窗消失（结束）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;引入状态机来控制逻辑，最简单的写法如下：&lt;/p&gt;
&lt;p&gt;example 3:&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//MainUI.cpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; MAINUI_DIALOG_STATE = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	READY,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	SHOW_ANIMATION,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	OPEN,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	CLOSE,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	DISMISS,&lt;span class=&quot;comment&quot;&gt;//调用关闭后2s，弹窗才会消失&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	END,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; MainUI::init()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m_state = MAINUI_DIALOG_STATE.READY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m_timeout = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//存储时间间隔，作为延迟的判断条件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//打开按钮&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Button *openBtn = Button::create();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	openBtn-&amp;gt;addClickEventListener([=] (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//runActionBeforeShowDialog();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		setState(MAINUI_DIALOG_STATE.SHOW_ANIMATION);&lt;span class=&quot;comment&quot;&gt;//点击打开，展示动画&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m_dialog = MyAlertDialog::create();&lt;span class=&quot;comment&quot;&gt;//调整为成员变量进行控制，需在头文件中声明并在构造中置为nullptr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m_dialog-&amp;gt;setDismissFunc(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::bind(&amp;amp;MainUI::dismissDialog, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//动画&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; MainUI::runActionBeforeShowDialog()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Action *action1 = SomeAction::create(&lt;span class=&quot;number&quot;&gt;2.0f&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Action *action2 = OtherAction::create(&lt;span class=&quot;number&quot;&gt;1.5f&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//第二个动画&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//CallFunc *callback = CallFunc::create(std::bind(&amp;amp;MainUI::showDialog, this));不再需要回调&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Sequence *seq = Sequence::create(action, DelayTime::create(&lt;span class=&quot;number&quot;&gt;0.5f&lt;/span&gt;), action2, &lt;span class=&quot;literal&quot;&gt;nullptr&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//移除回调和回调前的延迟&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;runAction(seq);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//优化：把打开弹窗的代码整理成函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; MainUI::showDialog()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dialog-&amp;gt;show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; MainUI::dismissDialog()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	setState(MAINUI_DIALOG_STATE.CLOSE);&lt;span class=&quot;comment&quot;&gt;//主动点关闭，状态变为CLOSE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; MainUI::update(&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; dt)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m_timeout += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//每次update自加1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//通过当前状态判断是否进入下一状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (m_state == MAINUI_DIALOG_STATE.SHOW_ANIMATION)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (m_timeout &amp;gt; (&lt;span class=&quot;number&quot;&gt;4.f&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1.f&lt;/span&gt;) * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//cocos2d-x每秒60帧，此处即为1s延迟 + 4s动画时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			setState(MAINUI_DIALOG_STATE.OPEN);&lt;span class=&quot;comment&quot;&gt;//延迟一秒，打开弹窗&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (m_state == MAINUI_DIALOG_STATE.OPEN)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (m_timeout &amp;gt; &lt;span class=&quot;number&quot;&gt;4.f&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//4s后自动关闭&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			setState(MAINUI_DIALOG_STATE.CLOSE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (m_state == MAINUI_DIALOG_STATE.CLOSE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (m_timeout &amp;gt; &lt;span class=&quot;number&quot;&gt;2.f&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//2s后弹窗消失&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			setState(MAINUI_DIALOG_STATE.DISMISS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (m_state == MAINUI_DIALOG_STATE.DISMISS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		setState(MAINUI_DIALOG_STATE.END)&lt;span class=&quot;comment&quot;&gt;//状态结束，没有延迟&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; MainUI::setState(MAINUI_DIALOG_STATE state)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m_timeout = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//进入新状态时，时间间隔清零&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (state == MAINUI_DIALOG_STATE.SHOW_ANIMATION)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		runActionBeforeShowDialog();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (state == MAINUI_DIALOG_STATE.OPEN)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		showDialog();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (state == MAINUI_DIALOG_STATE.CLOSE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//do nothing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (state == MAINUI_DIALOG_STATE.DISMISS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//do nothing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m_dialog-&amp;gt;dismiss();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (state == MAINUI_DIALOG_STATE.END)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//状态结束&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m_state = state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//MyAlertDialog.cpp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bool MyAlertDialog::init()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//关闭按钮&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Button *closeBtn = Button::create();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	closeBtn-&amp;gt;addClickEventListener([=] (this)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//延迟两秒关闭&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//scheduleOnce(std::bind(&amp;amp;MyAlertDialog::m_dismissFunc, this), 2.0f);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m_dismissFunc();//无需在这里处理延迟，调用函数设置关闭状态即可&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//延迟4s自动关闭,关闭延迟两秒程序员偷懒未做&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//scheduleOnce(std::bind(&amp;amp;MyAlertDialog::m_dismissFunc, this), 4.0f);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//此处延迟已统一由MainUI进行处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void setDismissFunc(std::function&amp;lt;void()&amp;gt; func)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m_dismissFunc = func;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过example 2、3的对比，我们可以看出，使用状态机，不仅让代码更加清晰，而且将逻辑都放在了MainUI处理，包括弹窗的显示和消失，弹窗只关注自身内部的变化，不去对自己进行dismiss的操作，使逻辑解耦。并且在这一过程中任何一个步骤出现问题，都能很快进行定位，并直接对相应状态下的代码进行调整，不会影响其他的状态。&lt;/p&gt;
&lt;p&gt;同时我们可以看到状态机的四个部分，首先在枚举中定义了所有的&lt;strong&gt;状态&lt;/strong&gt;，用m_state表示现态；在update函数和按钮响应事件中设置动作触发的&lt;strong&gt;事件&lt;/strong&gt;；&lt;strong&gt;动作&lt;/strong&gt;触发后执行响应逻辑并通过转移函数进行状态的切换；而setState则是状态的&lt;strong&gt;转移函数&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;有限状态机的优势&quot;&gt;&lt;a href=&quot;#有限状态机的优势&quot; class=&quot;headerlink&quot; title=&quot;有限状态机的优势&quot;&gt;&lt;/a&gt;有限状态机的优势&lt;/h2&gt;&lt;p&gt;通过上述案例，我们可以得出有限状态机的五个优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;编程快速简单&lt;/strong&gt;。编写有限状态机的方法有很多种，并且几乎所有的实现方法都非常简单。本文中将会提供几种状态机的实现方法及其利弊。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易于调试&lt;/strong&gt;。将游戏逻辑分解成不同的状态，使得问题的定位和修改变得方便。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;很少的计算开销&lt;/strong&gt;。有限状态机几乎不占用珍贵的处理器时间，因为它本质上遵守硬件编码规则，只需要对if-else进行处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;直觉性&lt;/strong&gt;。在生活中，人们总是自然地把事物思考为处在一种或另一种状态。“进入状态”、“状态不佳”也是我们常见的。在编码中，将游戏逻辑分解成一系列状态并创建相应的规则去处理是非常容易的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;灵活性&lt;/strong&gt;。代码增删变得方便快捷。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事实上，在写逻辑的时候已经潜在地使用了状态，只是没有把状态抽象出来，而是直接按流程去编写代码，使用响应、回调的方式做逻辑处理，这样使得在增删流程，后期维护时代码耦合过深，难以维护，最终不得不进行重构。而且当逻辑出现问题时，很难直接定位问题，降低了调试效率。&lt;/p&gt;
&lt;h2 id=&quot;如何优雅地使用状态机&quot;&gt;&lt;a href=&quot;#如何优雅地使用状态机&quot; class=&quot;headerlink&quot; title=&quot;如何优雅地使用状态机&quot;&gt;&lt;/a&gt;如何优雅地使用状态机&lt;/h2&gt;&lt;p&gt;上述给出的只是最简单的状态机，适合较少状态之间的切换.当逻辑变得庞杂的时候，if-else的逻辑将变成一场噩梦。状态的切换会让我们难以把握程序的现状。往后的扩展也会变得相当困难。&lt;/p&gt;
&lt;p&gt;这里我就要向大家介绍，如何优雅地使用状态机。&lt;/p&gt;
&lt;p&gt;我们在开发游戏的时候，经常会碰到游戏AI，在编写游戏AI时，我们通常会选择有限状态机。&lt;/p&gt;
&lt;p&gt;一般来说，在设计角色、怪物、NPC的时候，很有可能都是继承自同一个基类，此时状态机就不宜写成上面那种格式。我们可以先将状态写成一个抽象类：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; State&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; ~State() &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Enter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Player*)&lt;/span&gt; &lt;/span&gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Player*)&lt;/span&gt; &lt;/span&gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Exit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Player*)&lt;/span&gt; &lt;/span&gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里预留了Enter和Exit的接口，方便做状态切换时的&lt;strong&gt;动作&lt;/strong&gt;。上述三个接口都有一个Player的指针作为传参。这里我不想以简单我怪物的逻辑作为示例来讲解，现在很多RPG类的手游都提供了挂机刷怪的逻辑，点开这个设置，角色就会自动跑到附近的副本里刷怪升级，减轻玩家的负担。&lt;/p&gt;
&lt;p&gt;这里我设定一个逻辑，开始挂机时，自动寻找附近副本，刷怪，刷怪需要体力值，体力过低时会自动回城休息，刷怪获得物品占满物品栏时会自动回城贩卖。达到设定要求时挂机停止。如图2所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./chart2.jpg&quot; alt=&quot;chart2&quot;&gt;&lt;/p&gt;
&lt;p&gt;根据上述条件，我们可以得出Player的类。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Class Player : &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; BaseGameEntity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	State* m_pCurrentState;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	location m_location;&lt;span class=&quot;comment&quot;&gt;//当前位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m_gold;&lt;span class=&quot;comment&quot;&gt;//金币数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m_exp;&lt;span class=&quot;comment&quot;&gt;//经验数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m_strength;&lt;span class=&quot;comment&quot;&gt;//体力值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m_goods;&lt;span class=&quot;comment&quot;&gt;//物品数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Player(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; uid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//状态转移函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ChangeState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(State* newState)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Player::update()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (m_pCurrentState)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m_pCurrentState-&amp;gt;Execute(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; Player::ChangeState(State* newState)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//现态退出时的动作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m_pCurrentState-&amp;gt;Exit(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m_pCurrentState = newState;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//次态进入时的动作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	m_pCurrentState-&amp;gt;Enter(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过图2我们可以看到，一共有四个状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;挂机：将角色移动到副本中，寻找附近的怪物击杀，获取经验和金钱，扣除体力。若经验到达设定值，则停止挂机。&lt;/li&gt;
&lt;li&gt;回城休息：角色体力过低，自动移动位置到城里休息。休息完毕回到挂机状态。&lt;/li&gt;
&lt;li&gt;回城贩卖：角色背包装满，回城自动贩卖，若金钱到达设定值，则停止挂机，否则回到挂机状态。&lt;/li&gt;
&lt;li&gt;结束：挂机过程结束，角色回城。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以挂机状态为例，实现这个状态只需要直接将State类继承过来。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; AutoState : &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; State&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	AutoState() &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Enter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Player* player)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Player* player)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Exit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Player* player)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据逻辑补齐接口：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; AutoState::Enter(Player* player)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//寻找副本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	player-&amp;gt;ChangeLocation(dungeon);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; AutoState::Execute(Player* player)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//认为每次执行就击杀了一个怪物&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	player-&amp;gt;AddGold(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	player-&amp;gt;AddExp(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	player-&amp;gt;AddGoods(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	player-&amp;gt;DecreaseStrength();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//背包装满，则回城贩卖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (player-&amp;gt;PocketsFull())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		player-&amp;gt;ChangeState(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; GoBackAndSellState());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//体力值过低，则回城休息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (player-&amp;gt;NeedRest())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		player-&amp;gt;ChangeState(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; GoBackAndRestState());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; AutoState::Execute(Player* player)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt; &amp;lt;&amp;lt; GetNameOfEntity(player-&amp;gt;Uid()) &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt;&amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;I&#39;m leaving the dungeon!&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码简单地讲述了如何使用状态模式编写一段游戏AI，上述的实现方式就是&lt;strong&gt;状态模式&lt;/strong&gt;[3]。为了方便讲解，这里所列举出的状态都是比较独立的，以便于我们对状态机本身的理解和状态模式的把握。&lt;/p&gt;
&lt;p&gt;通过这几段代码，和上面example 3作对比，我们可以发现新的写法丢弃了繁重的if-else结构，通过类的继承的方式来实现整个逻辑，这样不仅简化了逻辑的编写，也让我们搭建游戏框架变得更加方便。状态的增删也仅需要新建和移除状态子类即可，十分快捷。&lt;/p&gt;
&lt;p&gt;当然，细心的朋友可能发现，我们在每次切换状态的时候都做了一次new的操作，在状态切换频繁的时候会消耗很多资源。这里可以具体问题具体分析，究竟是直接new，还是将子类写成单例，则需要读者根据需求自己把握了。&lt;/p&gt;
&lt;h2 id=&quot;状态机的使用场景&quot;&gt;&lt;a href=&quot;#状态机的使用场景&quot; class=&quot;headerlink&quot; title=&quot;状态机的使用场景&quot;&gt;&lt;/a&gt;状态机的使用场景&lt;/h2&gt;&lt;p&gt;状态机的使用场景非常广泛，除了上述在游戏中处理UI逻辑和编写游戏AI时需要使用状态机编程以外，还有很多地方会用到状态机。&lt;/p&gt;
&lt;p&gt;状态机本身广泛应用于硬件控制电路设计中，比如比较经典的电梯、洗衣机的控制。&lt;/p&gt;
&lt;p&gt;软件中如正则表达式[4]、词法分析，网络协议如下图所示的TCP/IP协议[5]等，可以说有限状态机是无处不在的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./chart3.png&quot; alt=&quot;chart2&quot;&gt;&lt;/p&gt;
&lt;p&gt;当然，&lt;strong&gt;任何编程规范都不宜被滥用。&lt;/strong&gt;在最初的时候，example 1就已经是比较合适的写法了，没有必要过度追求编程规范，反而会降低开发效率。本文中只是以一个复杂的弹窗（结算动画、中奖提示等类型）讲述状态机的优势，在实际应用场景中，游戏主逻辑、游戏大厅等具有复杂UI交互的类，都可以考虑使用状态机来进行代码编写，细分状态，保证代码的健壮性，方便以后扩展新的特性。&lt;/p&gt;
&lt;p&gt;本文侧重游戏开发中的状态机，这里提到的一些使用场景在文末&lt;strong&gt;参考资料&lt;/strong&gt;部分附上了链接，有兴趣的朋友可以进行深入阅读。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;在游戏开发中，状态机有利于处理复杂模块的逻辑，降低耦合度，方便扩展特性。&lt;/p&gt;
&lt;p&gt;简单实现的状态机会面临if-else过多所造成的难以维护的问题，而状态模式则是实现状态机的最优解法，在细节处仍有不少可优化的地方。&lt;/p&gt;
&lt;p&gt;状态机应用广泛，但不宜滥用状态机。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;[1] &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA&quot; title=&quot;Title&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;有限状态机&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] Mat Buckland, Programming Game AI by example&lt;/p&gt;
&lt;p&gt;[3] &lt;a href=&quot;http://design-patterns.readthedocs.org/zh_CN/latest/behavioral_patterns/state.html&quot; title=&quot;Title&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;状态模式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4] &lt;a href=&quot;http://qntm.org/algo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Algorithm for converting a finite state machine into a regular expression&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[5] &lt;a href=&quot;http://www.tcpipguide.com/free/t_TCPOperationalOverviewandtheTCPFiniteStateMachineF-2.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TCP Finite State Machine&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##写在最后&lt;br&gt;本文由笔者近期工作和学习所得，上述示例代码均为直接手写，若有错漏，欢迎指出。&lt;/p&gt;
&lt;p&gt;未经允许，不得转载。&lt;/p&gt;
&lt;p&gt;By：陈玉潇 CdiajadeX&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;你是否还在面对乱作一团的代码束手无策？你是否仍然觉得复杂的逻辑无从下手？你是否觉得游戏AI高端得毫无头绪？本文将以一个复杂的弹窗逻辑和RPG
    
    </summary>
    
      <category term="Game Development" scheme="http://chenyuxiaodhr.github.io/categories/Game-Development/"/>
    
    
      <category term="Game Development" scheme="http://chenyuxiaodhr.github.io/tags/Game-Development/"/>
    
      <category term="Finite State Machine" scheme="http://chenyuxiaodhr.github.io/tags/Finite-State-Machine/"/>
    
  </entry>
  
</feed>
